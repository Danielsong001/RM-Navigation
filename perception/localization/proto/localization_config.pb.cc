// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LocalizationConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_5fconfig_2eproto() {
  protobuf_AddDesc_localization_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization_config.proto");
  GOOGLE_CHECK(file != NULL);
  LocalizationConfig_descriptor_ = file->message_type(0);
  static const int LocalizationConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, odom_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, base_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, global_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, laser_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, map_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, init_pose_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, transform_tolerance_),
  };
  LocalizationConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationConfig_descriptor_,
      LocalizationConfig::default_instance_,
      LocalizationConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationConfig_descriptor_, &LocalizationConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_5fconfig_2eproto() {
  delete LocalizationConfig::default_instance_;
  delete LocalizationConfig_reflection_;
  delete LocalizationConfig::_default_odom_frame_id_;
  delete LocalizationConfig::_default_base_frame_id_;
  delete LocalizationConfig::_default_global_frame_id_;
  delete LocalizationConfig::_default_laser_topic_name_;
  delete LocalizationConfig::_default_map_topic_name_;
  delete LocalizationConfig::_default_init_pose_topic_name_;
}

void protobuf_AddDesc_localization_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031localization_config.proto\"\206\002\n\022Localiza"
    "tionConfig\022\033\n\rodom_frame_id\030\001 \002(\t:\004odom\022"
    " \n\rbase_frame_id\030\002 \002(\t:\tbase_link\022\034\n\017glo"
    "bal_frame_id\030\003 \002(\t:\003map\022)\n\020laser_topic_n"
    "ame\030\004 \002(\t:\017base_laser_scan\022\033\n\016map_topic_"
    "name\030\005 \002(\t:\003map\022)\n\024init_pose_topic_name\030"
    "\006 \002(\t:\013initialpose\022 \n\023transform_toleranc"
    "e\030\007 \002(\001:\0030.1", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization_config.proto", &protobuf_RegisterTypes);
  LocalizationConfig::_default_odom_frame_id_ =
      new ::std::string("odom", 4);
  LocalizationConfig::_default_base_frame_id_ =
      new ::std::string("base_link", 9);
  LocalizationConfig::_default_global_frame_id_ =
      new ::std::string("map", 3);
  LocalizationConfig::_default_laser_topic_name_ =
      new ::std::string("base_laser_scan", 15);
  LocalizationConfig::_default_map_topic_name_ =
      new ::std::string("map", 3);
  LocalizationConfig::_default_init_pose_topic_name_ =
      new ::std::string("initialpose", 11);
  LocalizationConfig::default_instance_ = new LocalizationConfig();
  LocalizationConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_5fconfig_2eproto {
  StaticDescriptorInitializer_localization_5fconfig_2eproto() {
    protobuf_AddDesc_localization_5fconfig_2eproto();
  }
} static_descriptor_initializer_localization_5fconfig_2eproto_;

// ===================================================================

::std::string* LocalizationConfig::_default_odom_frame_id_ = NULL;
::std::string* LocalizationConfig::_default_base_frame_id_ = NULL;
::std::string* LocalizationConfig::_default_global_frame_id_ = NULL;
::std::string* LocalizationConfig::_default_laser_topic_name_ = NULL;
::std::string* LocalizationConfig::_default_map_topic_name_ = NULL;
::std::string* LocalizationConfig::_default_init_pose_topic_name_ = NULL;
#ifndef _MSC_VER
const int LocalizationConfig::kOdomFrameIdFieldNumber;
const int LocalizationConfig::kBaseFrameIdFieldNumber;
const int LocalizationConfig::kGlobalFrameIdFieldNumber;
const int LocalizationConfig::kLaserTopicNameFieldNumber;
const int LocalizationConfig::kMapTopicNameFieldNumber;
const int LocalizationConfig::kInitPoseTopicNameFieldNumber;
const int LocalizationConfig::kTransformToleranceFieldNumber;
#endif  // !_MSC_VER

LocalizationConfig::LocalizationConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LocalizationConfig)
}

void LocalizationConfig::InitAsDefaultInstance() {
}

LocalizationConfig::LocalizationConfig(const LocalizationConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LocalizationConfig)
}

void LocalizationConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  odom_frame_id_ = const_cast< ::std::string*>(_default_odom_frame_id_);
  base_frame_id_ = const_cast< ::std::string*>(_default_base_frame_id_);
  global_frame_id_ = const_cast< ::std::string*>(_default_global_frame_id_);
  laser_topic_name_ = const_cast< ::std::string*>(_default_laser_topic_name_);
  map_topic_name_ = const_cast< ::std::string*>(_default_map_topic_name_);
  init_pose_topic_name_ = const_cast< ::std::string*>(_default_init_pose_topic_name_);
  transform_tolerance_ = 0.1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationConfig::~LocalizationConfig() {
  // @@protoc_insertion_point(destructor:LocalizationConfig)
  SharedDtor();
}

void LocalizationConfig::SharedDtor() {
  if (odom_frame_id_ != _default_odom_frame_id_) {
    delete odom_frame_id_;
  }
  if (base_frame_id_ != _default_base_frame_id_) {
    delete base_frame_id_;
  }
  if (global_frame_id_ != _default_global_frame_id_) {
    delete global_frame_id_;
  }
  if (laser_topic_name_ != _default_laser_topic_name_) {
    delete laser_topic_name_;
  }
  if (map_topic_name_ != _default_map_topic_name_) {
    delete map_topic_name_;
  }
  if (init_pose_topic_name_ != _default_init_pose_topic_name_) {
    delete init_pose_topic_name_;
  }
  if (this != default_instance_) {
  }
}

void LocalizationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationConfig_descriptor_;
}

const LocalizationConfig& LocalizationConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_5fconfig_2eproto();
  return *default_instance_;
}

LocalizationConfig* LocalizationConfig::default_instance_ = NULL;

LocalizationConfig* LocalizationConfig::New() const {
  return new LocalizationConfig;
}

void LocalizationConfig::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_odom_frame_id()) {
      if (odom_frame_id_ != _default_odom_frame_id_) {
        odom_frame_id_->assign(*_default_odom_frame_id_);
      }
    }
    if (has_base_frame_id()) {
      if (base_frame_id_ != _default_base_frame_id_) {
        base_frame_id_->assign(*_default_base_frame_id_);
      }
    }
    if (has_global_frame_id()) {
      if (global_frame_id_ != _default_global_frame_id_) {
        global_frame_id_->assign(*_default_global_frame_id_);
      }
    }
    if (has_laser_topic_name()) {
      if (laser_topic_name_ != _default_laser_topic_name_) {
        laser_topic_name_->assign(*_default_laser_topic_name_);
      }
    }
    if (has_map_topic_name()) {
      if (map_topic_name_ != _default_map_topic_name_) {
        map_topic_name_->assign(*_default_map_topic_name_);
      }
    }
    if (has_init_pose_topic_name()) {
      if (init_pose_topic_name_ != _default_init_pose_topic_name_) {
        init_pose_topic_name_->assign(*_default_init_pose_topic_name_);
      }
    }
    transform_tolerance_ = 0.1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LocalizationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string odom_frame_id = 1 [default = "odom"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odom_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->odom_frame_id().data(), this->odom_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "odom_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_frame_id;
        break;
      }

      // required string base_frame_id = 2 [default = "base_link"];
      case 2: {
        if (tag == 18) {
         parse_base_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_frame_id().data(), this->base_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "base_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_global_frame_id;
        break;
      }

      // required string global_frame_id = 3 [default = "map"];
      case 3: {
        if (tag == 26) {
         parse_global_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->global_frame_id().data(), this->global_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "global_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_laser_topic_name;
        break;
      }

      // required string laser_topic_name = 4 [default = "base_laser_scan"];
      case 4: {
        if (tag == 34) {
         parse_laser_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_laser_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->laser_topic_name().data(), this->laser_topic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "laser_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map_topic_name;
        break;
      }

      // required string map_topic_name = 5 [default = "map"];
      case 5: {
        if (tag == 42) {
         parse_map_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_topic_name().data(), this->map_topic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_init_pose_topic_name;
        break;
      }

      // required string init_pose_topic_name = 6 [default = "initialpose"];
      case 6: {
        if (tag == 50) {
         parse_init_pose_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_init_pose_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->init_pose_topic_name().data(), this->init_pose_topic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "init_pose_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_transform_tolerance;
        break;
      }

      // required double transform_tolerance = 7 [default = 0.1];
      case 7: {
        if (tag == 57) {
         parse_transform_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_tolerance_)));
          set_has_transform_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LocalizationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LocalizationConfig)
  return false;
#undef DO_
}

void LocalizationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LocalizationConfig)
  // required string odom_frame_id = 1 [default = "odom"];
  if (has_odom_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odom_frame_id().data(), this->odom_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "odom_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->odom_frame_id(), output);
  }

  // required string base_frame_id = 2 [default = "base_link"];
  if (has_base_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_frame_id().data(), this->base_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "base_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_frame_id(), output);
  }

  // required string global_frame_id = 3 [default = "map"];
  if (has_global_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_frame_id().data(), this->global_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "global_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->global_frame_id(), output);
  }

  // required string laser_topic_name = 4 [default = "base_laser_scan"];
  if (has_laser_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->laser_topic_name().data(), this->laser_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "laser_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->laser_topic_name(), output);
  }

  // required string map_topic_name = 5 [default = "map"];
  if (has_map_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_topic_name().data(), this->map_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_topic_name(), output);
  }

  // required string init_pose_topic_name = 6 [default = "initialpose"];
  if (has_init_pose_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->init_pose_topic_name().data(), this->init_pose_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "init_pose_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->init_pose_topic_name(), output);
  }

  // required double transform_tolerance = 7 [default = 0.1];
  if (has_transform_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->transform_tolerance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LocalizationConfig)
}

::google::protobuf::uint8* LocalizationConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LocalizationConfig)
  // required string odom_frame_id = 1 [default = "odom"];
  if (has_odom_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odom_frame_id().data(), this->odom_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "odom_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->odom_frame_id(), target);
  }

  // required string base_frame_id = 2 [default = "base_link"];
  if (has_base_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_frame_id().data(), this->base_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "base_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_frame_id(), target);
  }

  // required string global_frame_id = 3 [default = "map"];
  if (has_global_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_frame_id().data(), this->global_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "global_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->global_frame_id(), target);
  }

  // required string laser_topic_name = 4 [default = "base_laser_scan"];
  if (has_laser_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->laser_topic_name().data(), this->laser_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "laser_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->laser_topic_name(), target);
  }

  // required string map_topic_name = 5 [default = "map"];
  if (has_map_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_topic_name().data(), this->map_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_topic_name(), target);
  }

  // required string init_pose_topic_name = 6 [default = "initialpose"];
  if (has_init_pose_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->init_pose_topic_name().data(), this->init_pose_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "init_pose_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->init_pose_topic_name(), target);
  }

  // required double transform_tolerance = 7 [default = 0.1];
  if (has_transform_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->transform_tolerance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocalizationConfig)
  return target;
}

int LocalizationConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string odom_frame_id = 1 [default = "odom"];
    if (has_odom_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odom_frame_id());
    }

    // required string base_frame_id = 2 [default = "base_link"];
    if (has_base_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_frame_id());
    }

    // required string global_frame_id = 3 [default = "map"];
    if (has_global_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_frame_id());
    }

    // required string laser_topic_name = 4 [default = "base_laser_scan"];
    if (has_laser_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->laser_topic_name());
    }

    // required string map_topic_name = 5 [default = "map"];
    if (has_map_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_topic_name());
    }

    // required string init_pose_topic_name = 6 [default = "initialpose"];
    if (has_init_pose_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->init_pose_topic_name());
    }

    // required double transform_tolerance = 7 [default = 0.1];
    if (has_transform_tolerance()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationConfig::MergeFrom(const LocalizationConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_odom_frame_id()) {
      set_odom_frame_id(from.odom_frame_id());
    }
    if (from.has_base_frame_id()) {
      set_base_frame_id(from.base_frame_id());
    }
    if (from.has_global_frame_id()) {
      set_global_frame_id(from.global_frame_id());
    }
    if (from.has_laser_topic_name()) {
      set_laser_topic_name(from.laser_topic_name());
    }
    if (from.has_map_topic_name()) {
      set_map_topic_name(from.map_topic_name());
    }
    if (from.has_init_pose_topic_name()) {
      set_init_pose_topic_name(from.init_pose_topic_name());
    }
    if (from.has_transform_tolerance()) {
      set_transform_tolerance(from.transform_tolerance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationConfig::CopyFrom(const LocalizationConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void LocalizationConfig::Swap(LocalizationConfig* other) {
  if (other != this) {
    std::swap(odom_frame_id_, other->odom_frame_id_);
    std::swap(base_frame_id_, other->base_frame_id_);
    std::swap(global_frame_id_, other->global_frame_id_);
    std::swap(laser_topic_name_, other->laser_topic_name_);
    std::swap(map_topic_name_, other->map_topic_name_);
    std::swap(init_pose_topic_name_, other->init_pose_topic_name_);
    std::swap(transform_tolerance_, other->transform_tolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationConfig_descriptor_;
  metadata.reflection = LocalizationConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
